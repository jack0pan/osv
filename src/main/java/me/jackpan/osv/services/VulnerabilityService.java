package me.jackpan.osv.services;

import lombok.RequiredArgsConstructor;
import me.jackpan.osv.entities.Vulnerability;
import me.jackpan.osv.github.models.PageInfo;
import me.jackpan.osv.github.models.SecurityVulnerabilityConnection;
import me.jackpan.osv.github.services.SecurityVulnerabilityService;
import me.jackpan.osv.repositories.VulnerabilityRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@RequiredArgsConstructor
@Service
public class VulnerabilityService {
    private final SecurityVulnerabilityService securityVulnerabilityService;
    private final VulnerabilityRepository vulnerabilityRepository;

    public void convertSecurityVulnerabilitiesToVulnerabilities() {
        long count = vulnerabilityRepository.count();
        if (count == 0) {
            deltaImport(null);
        } else {
            SecurityVulnerabilityConnection connection = securityVulnerabilityService.countSecurityVulnerabilities().block();
            if (connection != null && connection.getTotalCount() <= count) return;
            deltaImport(connection.getPageInfo().getEndCursor());
        }
    }

    private void deltaImport(String startCursor) {
        String cursor = startCursor;
        Boolean hasNext = true;
        while (hasNext) {
            SecurityVulnerabilityConnection connection =  securityVulnerabilityService.listSecurityVulnerabilities(100, cursor).block();
            PageInfo pageInfo = connection.getPageInfo();
            hasNext = pageInfo.getHasNextPage();
            cursor = pageInfo.getEndCursor();
            List<Vulnerability> vulns = connection.getNodes().stream().map(Vulnerability::of).collect(Collectors.toList());
            vulnerabilityRepository.saveAll(vulns);
        }
    }

}
